// Code generated by protoc-gen-go. DO NOT EDIT.
// source: georaft.proto

package georaft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestVoteArgs struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId          int32    `protobuf:"varint,2,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex         int32    `protobuf:"varint,3,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int32    `protobuf:"varint,4,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteArgs) Reset()         { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()    {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d670479826b17d8, []int{0}
}

func (m *RequestVoteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteArgs.Unmarshal(m, b)
}
func (m *RequestVoteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteArgs.Marshal(b, m, deterministic)
}
func (m *RequestVoteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteArgs.Merge(m, src)
}
func (m *RequestVoteArgs) XXX_Size() int {
	return xxx_messageInfo_RequestVoteArgs.Size(m)
}
func (m *RequestVoteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteArgs proto.InternalMessageInfo

func (m *RequestVoteArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteArgs) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteReply) Reset()         { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()    {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d670479826b17d8, []int{1}
}

func (m *RequestVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteReply.Unmarshal(m, b)
}
func (m *RequestVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteReply.Marshal(b, m, deterministic)
}
func (m *RequestVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteReply.Merge(m, src)
}
func (m *RequestVoteReply) XXX_Size() int {
	return xxx_messageInfo_RequestVoteReply.Size(m)
}
func (m *RequestVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteReply proto.InternalMessageInfo

func (m *RequestVoteReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesArgs struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             int32    `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogIndex         int32    `protobuf:"varint,3,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	PrevLogTerm          int32    `protobuf:"varint,4,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	Log                  []byte   `protobuf:"bytes,5,opt,name=Log,proto3" json:"Log,omitempty"`
	LeaderCommit         int32    `protobuf:"varint,6,opt,name=LeaderCommit,proto3" json:"LeaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesArgs) Reset()         { *m = AppendEntriesArgs{} }
func (m *AppendEntriesArgs) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesArgs) ProtoMessage()    {}
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d670479826b17d8, []int{2}
}

func (m *AppendEntriesArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesArgs.Unmarshal(m, b)
}
func (m *AppendEntriesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesArgs.Marshal(b, m, deterministic)
}
func (m *AppendEntriesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesArgs.Merge(m, src)
}
func (m *AppendEntriesArgs) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesArgs.Size(m)
}
func (m *AppendEntriesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesArgs proto.InternalMessageInfo

func (m *AppendEntriesArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesArgs) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesArgs) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *AppendEntriesArgs) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesReply struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ConflictIndex        int32    `protobuf:"varint,3,opt,name=ConflictIndex,proto3" json:"ConflictIndex,omitempty"`
	ConflictTerm         int32    `protobuf:"varint,4,opt,name=ConflictTerm,proto3" json:"ConflictTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesReply) Reset()         { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()    {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d670479826b17d8, []int{3}
}

func (m *AppendEntriesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesReply.Unmarshal(m, b)
}
func (m *AppendEntriesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesReply.Marshal(b, m, deterministic)
}
func (m *AppendEntriesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesReply.Merge(m, src)
}
func (m *AppendEntriesReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesReply.Size(m)
}
func (m *AppendEntriesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesReply proto.InternalMessageInfo

func (m *AppendEntriesReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesReply) GetConflictIndex() int32 {
	if m != nil {
		return m.ConflictIndex
	}
	return 0
}

func (m *AppendEntriesReply) GetConflictTerm() int32 {
	if m != nil {
		return m.ConflictTerm
	}
	return 0
}

type L2SAppendEntriesReply struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ConflictIndex        int32    `protobuf:"varint,3,opt,name=ConflictIndex,proto3" json:"ConflictIndex,omitempty"`
	ConflictTerm         int32    `protobuf:"varint,4,opt,name=ConflictTerm,proto3" json:"ConflictTerm,omitempty"`
	MatchIndex           []byte   `protobuf:"bytes,7,opt,name=MatchIndex,proto3" json:"MatchIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2SAppendEntriesReply) Reset()         { *m = L2SAppendEntriesReply{} }
func (m *L2SAppendEntriesReply) String() string { return proto.CompactTextString(m) }
func (*L2SAppendEntriesReply) ProtoMessage()    {}
func (*L2SAppendEntriesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d670479826b17d8, []int{4}
}

func (m *L2SAppendEntriesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2SAppendEntriesReply.Unmarshal(m, b)
}
func (m *L2SAppendEntriesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2SAppendEntriesReply.Marshal(b, m, deterministic)
}
func (m *L2SAppendEntriesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2SAppendEntriesReply.Merge(m, src)
}
func (m *L2SAppendEntriesReply) XXX_Size() int {
	return xxx_messageInfo_L2SAppendEntriesReply.Size(m)
}
func (m *L2SAppendEntriesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_L2SAppendEntriesReply.DiscardUnknown(m)
}

var xxx_messageInfo_L2SAppendEntriesReply proto.InternalMessageInfo

func (m *L2SAppendEntriesReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *L2SAppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *L2SAppendEntriesReply) GetConflictIndex() int32 {
	if m != nil {
		return m.ConflictIndex
	}
	return 0
}

func (m *L2SAppendEntriesReply) GetConflictTerm() int32 {
	if m != nil {
		return m.ConflictTerm
	}
	return 0
}

func (m *L2SAppendEntriesReply) GetMatchIndex() []byte {
	if m != nil {
		return m.MatchIndex
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestVoteArgs)(nil), "RequestVoteArgs")
	proto.RegisterType((*RequestVoteReply)(nil), "RequestVoteReply")
	proto.RegisterType((*AppendEntriesArgs)(nil), "AppendEntriesArgs")
	proto.RegisterType((*AppendEntriesReply)(nil), "AppendEntriesReply")
	proto.RegisterType((*L2SAppendEntriesReply)(nil), "L2SAppendEntriesReply")
}

func init() {
	proto.RegisterFile("georaft.proto", fileDescriptor_9d670479826b17d8)
}

var fileDescriptor_9d670479826b17d8 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xcd, 0x8e, 0xda, 0x30,
	0x14, 0x85, 0x49, 0xf9, 0xed, 0x05, 0xd4, 0xe0, 0xaa, 0x55, 0xc4, 0xa2, 0x42, 0x56, 0x17, 0xac,
	0xb2, 0x48, 0xbb, 0xea, 0xaa, 0x08, 0x15, 0x8a, 0x14, 0xd4, 0x2a, 0xa0, 0xee, 0x4d, 0x72, 0x49,
	0x23, 0x41, 0x9c, 0x3a, 0x06, 0x15, 0xcd, 0x2b, 0xcc, 0x3c, 0xcb, 0x3c, 0xc2, 0xbc, 0xda, 0x28,
	0x26, 0x20, 0x27, 0xc0, 0x6a, 0x36, 0xb3, 0xf3, 0xfd, 0x62, 0x5d, 0x9f, 0x73, 0x74, 0x02, 0xdd,
	0x10, 0xb9, 0x60, 0x6b, 0x69, 0x27, 0x82, 0x4b, 0x4e, 0x1f, 0x0c, 0x78, 0xe7, 0xe1, 0xbf, 0x1d,
	0xa6, 0xf2, 0x0f, 0x97, 0x38, 0x12, 0x61, 0x4a, 0x08, 0xd4, 0x96, 0x28, 0xb6, 0x96, 0x31, 0x30,
	0x86, 0x75, 0x4f, 0x9d, 0xc9, 0x00, 0xda, 0x63, 0x16, 0x07, 0x51, 0xc0, 0x24, 0xce, 0x02, 0xeb,
	0x8d, 0xfa, 0xa4, 0x23, 0x42, 0xa1, 0xe3, 0xb2, 0x54, 0xba, 0x3c, 0x9c, 0xc5, 0x01, 0xfe, 0xb7,
	0xaa, 0xea, 0x4a, 0x81, 0x65, 0x5b, 0xf2, 0x59, 0x3d, 0x50, 0x3b, 0x6e, 0xd1, 0x10, 0xfd, 0x09,
	0xa6, 0x26, 0xc7, 0xc3, 0x64, 0x73, 0xb8, 0xa5, 0x27, 0xbb, 0x30, 0x15, 0x2c, 0x96, 0x78, 0xd4,
	0xd3, 0xf2, 0x74, 0x44, 0x9f, 0x0c, 0xe8, 0x8d, 0x92, 0x04, 0xe3, 0xe0, 0x47, 0x2c, 0x45, 0x84,
	0xe9, 0x4d, 0x6f, 0x7d, 0x68, 0xb9, 0xc8, 0x02, 0x14, 0x67, 0x63, 0xe7, 0x39, 0x73, 0xf5, 0x5b,
	0xe0, 0xbe, 0xec, 0x4a, 0x67, 0x99, 0x96, 0x7c, 0xd6, 0x5d, 0x69, 0x88, 0x98, 0x50, 0x75, 0x79,
	0x68, 0xd5, 0x07, 0xc6, 0xb0, 0xe3, 0x65, 0x47, 0x95, 0x96, 0x7a, 0x63, 0xcc, 0xb7, 0xdb, 0x48,
	0x5a, 0x8d, 0x3c, 0x2d, 0x8d, 0xd1, 0x7b, 0x03, 0x48, 0xc1, 0xc1, 0xed, 0x38, 0x2c, 0x68, 0x2e,
	0x76, 0xbe, 0x8f, 0x69, 0x9a, 0x47, 0x71, 0x1a, 0xc9, 0x67, 0xe8, 0x8e, 0x79, 0xbc, 0xde, 0x44,
	0xbe, 0xd4, 0x1d, 0x14, 0x61, 0x26, 0xe7, 0x04, 0x34, 0x0f, 0x05, 0x46, 0x1f, 0x0d, 0xf8, 0xe0,
	0x3a, 0x8b, 0xd7, 0xa3, 0x88, 0x7c, 0x02, 0x98, 0x33, 0xe9, 0xff, 0x3d, 0xae, 0x69, 0xaa, 0x74,
	0x35, 0xe2, 0xdc, 0x41, 0x73, 0x8a, 0xdc, 0x1b, 0x4d, 0x96, 0xe4, 0x2b, 0xb4, 0xb5, 0x5e, 0x11,
	0xd3, 0x2e, 0x95, 0xbe, 0xdf, 0xb3, 0xcb, 0xbd, 0xa3, 0x15, 0xf2, 0x0d, 0xba, 0x05, 0xbb, 0x84,
	0xd8, 0x17, 0x95, 0xea, 0xbf, 0xb7, 0x2f, 0x23, 0xa1, 0x15, 0x67, 0x0e, 0x6f, 0x17, 0xe8, 0x0b,
	0x94, 0x4c, 0x1c, 0xc8, 0x77, 0x30, 0xcb, 0xd1, 0x5d, 0xdd, 0xf5, 0xd1, 0xbe, 0x9a, 0x30, 0xad,
	0x38, 0x13, 0x68, 0xfd, 0x5a, 0xa5, 0x28, 0xf6, 0x28, 0x5e, 0x22, 0x6b, 0xd5, 0x50, 0xff, 0xfd,
	0x97, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x7e, 0x17, 0xe4, 0x08, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeoRAFTClient is the client API for GeoRAFT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoRAFTClient interface {
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
}

type geoRAFTClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoRAFTClient(cc grpc.ClientConnInterface) GeoRAFTClient {
	return &geoRAFTClient{cc}
}

func (c *geoRAFTClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/GeoRAFT/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoRAFTClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/GeoRAFT/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoRAFTServer is the server API for GeoRAFT service.
type GeoRAFTServer interface {
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
}

// UnimplementedGeoRAFTServer can be embedded to have forward compatible implementations.
type UnimplementedGeoRAFTServer struct {
}

func (*UnimplementedGeoRAFTServer) RequestVote(ctx context.Context, req *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (*UnimplementedGeoRAFTServer) AppendEntries(ctx context.Context, req *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}

func RegisterGeoRAFTServer(s *grpc.Server, srv GeoRAFTServer) {
	s.RegisterService(&_GeoRAFT_serviceDesc, srv)
}

func _GeoRAFT_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoRAFTServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GeoRAFT/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoRAFTServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoRAFT_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoRAFTServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GeoRAFT/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoRAFTServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoRAFT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GeoRAFT",
	HandlerType: (*GeoRAFTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _GeoRAFT_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _GeoRAFT_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "georaft.proto",
}

// SecretaryClient is the client API for Secretary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecretaryClient interface {
	L2SAppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*L2SAppendEntriesReply, error)
}

type secretaryClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretaryClient(cc grpc.ClientConnInterface) SecretaryClient {
	return &secretaryClient{cc}
}

func (c *secretaryClient) L2SAppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*L2SAppendEntriesReply, error) {
	out := new(L2SAppendEntriesReply)
	err := c.cc.Invoke(ctx, "/Secretary/L2SAppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretaryServer is the server API for Secretary service.
type SecretaryServer interface {
	L2SAppendEntries(context.Context, *AppendEntriesArgs) (*L2SAppendEntriesReply, error)
}

// UnimplementedSecretaryServer can be embedded to have forward compatible implementations.
type UnimplementedSecretaryServer struct {
}

func (*UnimplementedSecretaryServer) L2SAppendEntries(ctx context.Context, req *AppendEntriesArgs) (*L2SAppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L2SAppendEntries not implemented")
}

func RegisterSecretaryServer(s *grpc.Server, srv SecretaryServer) {
	s.RegisterService(&_Secretary_serviceDesc, srv)
}

func _Secretary_L2SAppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretaryServer).L2SAppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secretary/L2SAppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretaryServer).L2SAppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Secretary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Secretary",
	HandlerType: (*SecretaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "L2SAppendEntries",
			Handler:    _Secretary_L2SAppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "georaft.proto",
}

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObserverClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/Observer/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObserverServer is the server API for Observer service.
type ObserverServer interface {
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
}

// UnimplementedObserverServer can be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (*UnimplementedObserverServer) AppendEntries(ctx context.Context, req *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}

func RegisterObserverServer(s *grpc.Server, srv ObserverServer) {
	s.RegisterService(&_Observer_serviceDesc, srv)
}

func _Observer_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Observer/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Observer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _Observer_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "georaft.proto",
}
